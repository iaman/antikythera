// Generated by CoffeeScript 1.3.1

describe("Antikythera", function() {
  var transitionIn, transitionOut;
  transitionIn = function() {};
  transitionOut = function() {};
  describe("constructor", function() {
    it("creates an Antikythera", function() {
      var blah;
      blah = new Antikythera();
      return expect(blah instanceof Antikythera).toEqual(true);
    });
    return it("creates an Antikythera in development mode", function() {
      var blah;
      blah = new Antikythera({
        development: true
      });
      return expect(blah.options.development).toEqual(true);
    });
  });
  describe("stage", function() {
    return it("pushes a stage into the stages hash", function() {
      var blah;
      blah = new Antikythera();
      blah.stage("stuff", transitionIn, transitionOut);
      return expect(blah.stages["stuff"]).toEqual({
        name: "stuff",
        transitionIn: transitionIn,
        transitionOut: transitionOut
      });
    });
  });
  describe("go", function() {
    beforeEach(function() {
      return this.blah = new Antikythera();
    });
    it("fires a transition into a stage", function() {
      spyOn(this.blah, "_transition");
      this.blah.stage("stuff", transitionIn, transitionOut);
      this.blah.go("stuff");
      return expect(this.blah._transition).toHaveBeenCalledWith(this.blah.stages["stuff"], void 0);
    });
    it("queues a transition up if the Antikythera is in dev mode", function() {
      this.blah.options = {
        development: true
      };
      this.blah.go("stuff");
      return expect(this.blah.stageQueue.length).toEqual(1);
    });
    return it("returns false if the requested stage is the current stage", function() {
      return expect(this.blah.go("default")).toEqual(false);
    });
  });
  describe("crank", function() {
    beforeEach(function() {
      this.blah = new Antikythera({
        development: true
      });
      return this.blah.stage("stuff", transitionIn, transitionOut);
    });
    it("shifts a transition out of the queue and fires it off", function() {
      this.blah.go("stuff");
      spyOn(this.blah, "_transition");
      this.blah.crank();
      return expect(this.blah._transition).toHaveBeenCalledWith(this.blah.stages["stuff"], void 0);
    });
    return it("returns false if there's nothing in the queue", function() {
      return expect(this.blah.crank()).toEqual(false);
    });
  });
  return describe("_transition", function() {
    beforeEach(function() {
      return this.blah = new Antikythera();
    });
    it("executes a transition into a stage", function() {
      var goIn;
      goIn = jasmine.createSpy("goIn");
      this.blah.stage("stuff", goIn, transitionOut);
      this.blah.go("stuff");
      return expect(goIn).toHaveBeenCalled();
    });
    it("sets the current stage to the new one", function() {
      this.blah.stage("stuff", transitionIn, transitionOut);
      this.blah.go("stuff");
      return expect(this.blah.currentStage.name).toEqual("stuff");
    });
    return it("executes a transition out of the previous stage and into the next", function() {
      var goIn, goOut;
      goIn = jasmine.createSpy("goIn");
      goOut = jasmine.createSpy("goOut");
      this.blah.stage("stuff", transitionIn, goOut);
      this.blah.stage("things", goIn, transitionOut);
      this.blah.go("stuff");
      this.blah.go("things");
      expect(goOut).toHaveBeenCalled();
      return expect(goIn).toHaveBeenCalled();
    });
  });
});
